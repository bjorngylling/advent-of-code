package main

import (
	"io/ioutil"
	"log"
	"testing"
)

func TestDiffCase(t *testing.T) {
	if diffCase('a', 'a') {
		t.Errorf("Expected diffCase(a, a) -> false but was true")
	}
	if !diffCase('a', 'A') {
		t.Errorf("Expected diffCase(a, A) -> true but was false")
	}
}

func TestReaction(t *testing.T) {
	data := "dabAcCaCBAcCcaDA"
	expected := "dabAaCBAcaDA"
	result := reaction(data)
	if result != expected {
		t.Errorf("Expected %+v -> %+v but was %+v", data, expected, result)
	}
}

func TestAllReaction(t *testing.T) {
	data := "dabAcCaCBAcCcaDA"
	expected := "dabCBAcaDA"
	result := allReactions(data)
	if result != expected {
		t.Errorf("Expected %+v -> %+v but was %+v", data, expected, result)
	}
}

func TestAllReactions2(t *testing.T) {
	data := "NnaAdabAcCaCBAcCcaDAa"
	expected := "dabCBAcaD"
	result := allReactions2(data)
	if result != expected {
		t.Errorf("Expected %+v -> %+v but was %+v", data, expected, result)
	}
}

func TestAllReactions3(t *testing.T) {
	data := "NnaAdabAcCaCBAcCcaDAa"
	expected := "dabCBAcaD"
	result := allReactions3(data)
	if result != expected {
		t.Errorf("Expected %+v -> %+v but was %+v", data, expected, result)
	}
}

func TestRemovePolymer(t *testing.T) {
	data := "dabAcCaCBAcCcaDA"
	expected := "dbcCCBcCcD"
	result := removePolymer(data, "a")
	if result != expected {
		t.Errorf("Expected %+v -> %+v but was %+v", data, expected, result)
	}
}

func TestShortestPolymer(t *testing.T) {
	data := "NnAadabAcCaCBAcCcaDA"
	expected := "daDA"
	result := shortestPolymer(data)
	if result != expected {
		t.Errorf("Expected %+v -> %+v but was %+v", data, expected, result)
	}
}

var allReactionsAnswer = "ozsrZbMFrcnMBRDYiLnwzWbccIBXaLMIZIpSIhAvCMraozhJpyCfBcMNLjfNuesTfvDtnJXNKpkhehsMdOpDwHwvOwyewBeZlbJnhoPqJwLULpCntxVLyQjXyBmByBjsXJeBRCdABtNHVzmlkRFUPjdTZaOBzUCFELhgTeXKhEyHcvchKUwekbGWEchkDRJizWpQaCfeMJLuqvabQQejHphJFCyfiyhbIvyGYZMPcFttYEUxSvqnjdJClXqhgniQGnTTwCkUGZHDQiPhJqzISQmdnrULhfolhMbyPSdORzMRiAOBXDvoIIdsENbwmmAeXrQcVHyuZEEfzpFrQLDqWldCCwmkLPRkSOmJpedxFxxKChfPrMtDyzhlTcEwXAWqxodpWELTJAsuIkePdkaDzuQWsaOOkZAlzGzCNZZfdkdARHExgZqoVNjRTdgCQBqDUsPLDkbrzoTzQtDowFQCIEKHErnqjsVsEQQEqmWRkjNBeXkOGKSimcBosIqHHGErdijaMkVhAereHscZBhLSLJKUfrUJGRhTWceMAKNZWOdrGhxMbQvNmDUSOqNDbpCnOFCKChjCXIZtMywHRKPoquyubIRzTrlvwqyxNZtUEJIOXlOQKAWvzzSPQJMbzSDltgkFSGBIxBHKslgslkhYLIUsAVGfMsyROwtyJTMIwrXQwiGipJOfeKCvwjRsdmXMgzWxIgBZOgPLvpTHxFHJVOPZThcriSKHlFYgdEpYBHmfsTjHUnwccYxvtszvyltNQhoxUesKUVrlaZWTiOiYlRNKbUUjfoxKwZDRaiQueqKQJBQTPreVcqmiaKSgxvQRoJSRRvKCldGhfIjozshqFavFTDoewlukkBDqsaVHXGaWLtpBhVgncGxyxKAfybJHMVUAiqTYZfuSEDisRoGYimSYsbqMwwcjmSCiUlSYSCQPNAnWCVRtFnmEIDeAYkxZFhOEmsjGwchFDfwebuGMNqKpLDZuBMdlWogxtqNhlJlHyLYLqLZJdAbXwEbqBAjfDptWZRibPuRGAedsDnSuOiFdzstQBrmVbxhzWTvCsYBaYlpNOtzcxypnstiyrWmrIcznnrUwhQfjgkmBqGsjzVyVsQzLelQjQWykdTbRXyPapDiJsLbKUJuSzrtkWuvrsROCQsnayigQNwbuNSDTYVrWxzEgOiZTZCwYqTrJJYvPaDVEncxHlUZtHwZRlKeqbUlsTSCXlDJVhoIFSNlzdJmKhFdsxglQahjMklzmEIyDqLUVDGHcNwhGXhOgvJlEBwjXQnBiXfkqkspwTcFTOinQdqBgbHNlWEwJPdYbMfqDPJypcyljTcGMAJELdCsxAHZPzDZTyQUeaUsqIeivWDIqTENVhfazsNzAFEZmJvUrWIvyRQKQjzhXvaofLdvvAKCqWFqFNCSpTmfwOaYmgNLOzGFcLhfoUNZfhFAndNsJMsAfqvfcbTGPJrmVqnFcakCJXZhlxxiXWqqgVCNIktvJAVTmJpWjYCImKdExSXwCJHQxoPlnxLPBcWgIykwwsccKcQmKRcZAZGYGyuSJfoutxfXchApJAXLXZRJJhFiZLaxxsjkBjDzJXdATSaUKWclDRapMqfOpLqpoZvWlBBgKYisPhYGcqZVuPiXBPMIthIDUfxgxZvTOOSCFkhAkyuJxgnsGqsMJZtuwtfUrLglOKJqgHRQYlqjVcGtgLXGCEzIxsdmpaFYwjUlyGciPqPwtWXtFBIULNsjyloJUILROWUNzLqompMkEbkjmYkHnZgjQlTSGhXuLNJZrxKBUZAAXcFItGHJqPIyzIsFbkJvbadISEvssbRhcSFCVfxZKiSgyqtVfJBxqDCvlKGUOyooafPMdKCuOgTDbiwuLsvCRRKjrKhRPouHGTyTYAZJggBXciaqiUfowMMsbOcZcKLBznFvajyQQSFZLAmXTJVCqbMfHNSMymvQiqjPNKYqzfKtvRHobRlfjnrkMisXIzHTdSTUIgNwdMwkliGKQLBBwchsllwsAUOjheZhgZMFhEDOStZibdTNuIZdrIVEJFLdJVywSHZkahRxWvytQCkHLeAUjWyaftlmybrTXQsxjkULLfOkaSfzarNFSroPIbpMnwLFQVGMMDkRLgjpTmEoSHyxmNVzUTHNemSwoxuoUvTHVhMurnEGSyVauGPldNUIpoemRAfkVXOmeApbAnfetXWiGrcxiBUNZclAwXhubaHgdLRUJOxdyxZHyJQlmuLmQufYupfRVixFTJddfacAORgMpvIGHEEPkgTuKQjtKsBvGmeteUrBNGMyEXtRAxDZtgMAzJwjXdwFljzcpmkVhaLshJWVtkathyLZqGdSOkQhoqvvOdFGsEOBOgnCYOXmAMKVNIvBsBNSCpOFmVfOTeUYnTsbUeyMWHummZthLtVCgWRqrafNKFQlVDCdmHPKusOtoPnnpbmBZbpeABlCAclTdbemCgaGnBpiJnYIeNkQHToxICNHaQsenViTJshboAMTaQMQErpakhUADYHNTHrclBUqaMvHAYUKLwyyewPlmGSPKFyUiPzWRyXjeIyNbtAKCwGNYusQiyJbuLQRmQWAWAbZoaejLbzmizfrhUtVzrbnWBeCDFNgXTlArYcNvWXQGRMNROxskubNtoNUjtFpjSuJabESdpHWCzrUhquqJdEmlvoFaTJOsQcKZeiZgxmczBjPwPNAtOJZYZEyPZAUkWOLxdPqEZvfYVeTcQTzdXyoSfwCwBvIKTqJnjPxkrPRtNWddAuuwyaeIXiDfilBIMwIFgvELhXoPoRckLYBjAAxpgSgEOKQxkHHFezHYEyZFspZDTCWLYzYkCTlMRcSFdCGaOXFEUKJxydCDNsDiiiurJMfDEdFhXwySuNudRFxvjMASaNOVrNjDCCPqZGDTmoVfxhUwxfMCmnhxtfvgfPehTFrylVuvcjTHBwgsFWiimkvssiNfDYAdXBXmvMnCWdMadyvRsfxtFtCShAdctPAkfvGrChEBPigfinAlAmffMMlUoRyxgiLJgbnsrpIHUYqktJTSzJHnlWNjkwrUCOMwtagQYeQGmXYalBpwOAgSVOwtbZUrZtFOPOBqayPQGyrnnATaIDHZxLWlgjztewiEglFMSMbsltKGEhUVVocsTOeHmDuonuTlOJQzSYKmJaGhejBXZdwpUQtRYwqhnREWLdNTrcdEtKFDTdjRSeZMklynvmTOzrDtNDIMKcbdPqikgeAcljrXpYMwUZSexrEoWaKNTFOftgkFjOVjazznrOKgmTEgMyvnOUPSuTHShJapRKoBlYilpSTKeQEqKHWKOJeJMBXJWFDbhBCzxaVdsReTxFaikRjjsIFKiLDQrtYlFKqKZVhMPrSeniZvLqoaejMjgbOZMJGuOdFIQBlIdueDGuobnofEkapqkQSaIAUmWeGpTIzFHyVqCuwFIOVFAkEiDiiawhSzqXPAGIPbtudjkRlOwZOwnplnvqCAHSwIxpQALFtRkCgmCdaodNLMlYlgTEHWEMzsdAvOpBBnlOOIkSJRCUJSGWKxlICkVGzyjfHdYOTIOUFnqoEttLKnLwDQJiklBXainxdlKGszunUjbizFeKQlYexyaYrmlzsvuDgUlIZMCVGXFCZfnuEZmANUSFjcIxQtojOWIGYsKAtpdsqCDRgENShUHwtCCEylZlbagLUGFuIVUmYPkdHorhYTSPZVfegzHtFlyNuvJBaeTQfjOmAqKaeiPLqOEwNZYWXsDKRXaMsBhMsAgQXpIBkuxQUEqWKbnxGTlEcsgUCDuGcOOCfUIAyhuvCsvAjbGXDVfNhFHzARqOlsyphQsCqPOusKXlqJDLJWfhPMSIDZlXhSoGezDFTKrVZKLTrbDYGcdeunoPiBkNRkOxZaMpUyJFlJbPKFspDEuSzwtPOrgsTUXWJEqahPLqAJqoUVxmBfNINHUvaXZBxqsUMjaohoKFjDWZOMRWXbUgCOulKBLPgluDxOLPsAxoRpSpKCdFhiAZYHqBawLLBWiitJpwxULcWpZQKnPQCdFIGcGVpdrqEztSPGnGEYoVPheFGUFYXqBwDPBZrAUZkuHQzPJODaBvNsQocjPsEWBZQibKHkWEvYzxHmQTFKwPoMAHqLbwAnRdGIVMuAYCWHZsDNhbAvqGtIAdklJxBQQREOXLYBQkeQiehKLLaJCJGyyOymWkGdswVzVbTIJKbIrISvqrsREbrXluIMotkNfEcwoaNckFbsqjrzLJUGfMAwCaInDcowwDcnFzgYHZZSnLbFergvlGnXfbUMcYjUZWrwTRcrMuElkaESJzGIYqPyhCBKWBSnXyZOeUYhjhLsAtOeFdMOtgHSpRvMoPfRnoCYmAEWneZEJChrzuyOIXKFuHYVJzXDyepZcmSblVDkGCzvEcGFtKprdsVWsighjQTbxaFnfquCQLUwGwprrCsTmTJJSRVARhcHkycbGuWkURhzAenaNFwOkZtQNdkSiEyNtPnjgSNYWSbiHiLygOWQAfOEXffPgIcmkXwothrntokflNfTWdirTbJOHjOqCEwKTlBNEdydOWkYvXWubrKDkvBZVYpYNYQVMFOOPySvCRtRgkfZqtmYNsVRjCsDWZDvOPiREArUPwCfOiyuFWmwLEHDrmPUeVDxuPGSaFLrkqsOubezFvdmCHkrPcEYjsbeKsYPgCwNAbwpimfcatYVeGkIQUctIITbZvBPTmzumwscwKyyQgoEOtGseTyIQNLxtqbdwSctYRBKFoqUQnJLOTNRYZMilXOhJmycqDFwPnJwQFvuFRtWIrfPsGymECVfzsUrgsBntBnLwgQwestjdVdtFHwniAtsMZayAHgIDIBSXvhPAffyEFCUzEXsrTIlrZfyEzBaPFKOVCqcvtepfRkGTzmYnaMxdXQTyGcPNwBZgWuVdzkggpAskBRLVypVdjMUvrIjfNDJUMieaZsZrVBOdliVfclMVUmNJtAHsFqfxtHpfmrSUcRKIJQCEqIGtJFMOpQxGKCEEHGrqBfBMGfZAvKprwEXCfQsGdtPyBnbLsnyZYJmcjyptlTNSpspNabGXmYjqUpcXjEGYglMJueDIbEcGntoTlFxsHkZNNDQKuJdokXZnkcnXFJXmHvACBIfkTQtMxtZKETNIsyjramfNFEuLZYxYWHudoCQZGLDSOlMvGubIaEMEUlqgSWawPHXYHwDuTqJJiKTRfvDvBxIoafBrOKPgVctsOfxqCuQZfKXSCmqNDNPTUlgYupsktUUyGrNzJmbozOPcyykdFSrkPjuQZSmIbaBQSfiXMlZfHzHnzjZJvSXqdsnEYJIXAXkMgneOCiqjMEvPfTazuskuFBCIdFysLiOdolFcdrgScvnQvWxSTcpzefzNBXcTsYqENzehwFcYkyCHNAnaFDDHxVnyLLgNxzaNASDAylNJUckmTmTJLslvZaMeAXLdWAtDXdXbYzqqpCgUFWnWexrEGrjAnWZpozCWeSxQVdZjdHfjAuCCYAcbCYmcNtlJMldcLydJtryPKJPGxUzFVMNTYlhEILqXioFGHizqflwxCDULvlpvGMHYFPQLEGOGNJihkswpvBCzyqgLzTGygtGmvZcoSVsHAZrpZIdXVOVwPbcPddLUcDXrXEmYteOSeUFWaGSqVnLsgstucvwoTXJyBqrBvNbAemolYYMFjHgqHmCYmyJNaEgTGSEqOMqAirVYMfkjhwSSuLzkMzshRFDYkIOMrraomndSWpCtcOpLVgkzTnVxjhUescBZNeobRMrgKmWcerjqVcDBjzaUTQTVTBuhhURePtKROSYCwlobeADTktdaEBOLWcysorkTpEruHHUbtvtqtuAZJbdCvQJRECwMkGRmrBOEnzbCSEuHJXvNtZKGvlPoCTcPwsDNMOARRmoiKydfrHSZmKZlUssWHJKFmyvRIaQmoQesgtGeAnjYMycMhQGhJfmyyLOMEaBnVbRQbYjxtOWVCUTSGSlNvQsgAwfuEsoETyMexRxdCulDDpCBpWvovxDizPRzahSvsOCzVMgTGYgtZlGQYZcbVPWSKHIjngogelqpfyhmgVPLVludcXWLFQZIhgfOIxQlieHLytnmvfZuXgpjkpYRTjDYlCDLmjLTnCMycBCayccUaJFhDJzDvqXsEwcZOPzwNaJRgeRXEwNwfuGcPQQZyBxDxdTawDlxaEmAzVLSljtMtMKCujnLYadsanAZXnGllYNvXhddfANanhcYKyCfWHEZneQyStCxbnZFEZPCtsXwVqNVCsGRDCfLODoIlSYfDicbfUKSUZAtFpVemJQIcoENGmKxaxijyeNSDQxsVjzJZNhZhFzLmxIFsqbABiMszqUJpKRsfDKYYCpoZOBMjZnRgYuuTKSPUyGLutpndnQMcsxkFzqUcQXFoSTCvGpkoRbFAOiXbVdVFrtkIjjQtUdWhyxhpWAwsGQLuemeAiBUgVmLosdlgzqcODUhwyXyzlUefnFMARJYSintekzTXmTqtKFibcaVhMxjfxNCKNzxKODjUkqdnnzKhSXfLtOTNgCeBidEUjmLGygeJxCPuQJyMxgBAnPSPsntLTPYJCMjyzYNSlBNbYpTDgSqFcxeWRPkVazFgmbFbQRgheeckgXqPomfjTgiQecqjikrCusRMFPhTXFQfShaTjnMuvmLCFvILDobvRzSzAEImujdnFJiRVumJDvPYvlrbKSaPGGKZDvUwGzbWnpCgYtqxDXmANyMZtgKrFPETVCQcvokfpAbZeYFzRLitRSxeZucfeYFFapHVxsbidiGhaYAzmSTaINWhfTDvDJTSEWqGWlNbTNbSGRuSZFvceMYgSpFRiwTrfUVfqWjNpWfdQCYMjHoxLImzyrntoljNquQOfkbryTCsWDBQTXlnqiYtESgToeOGqYYkWCSWMUZMtpbVzBtiiTCuqiKgEvyTACFMIPWBanWcGpySkEBSJyeCpRKhcMDVfZEBUoSQKRlfAsgpUXdvEupMRdhelWMwfUYIoFcWpuRaerIpoVdzwdScJrvSnyMTQzFKGrTrcVsYpoofmvqynyPyvzbVKdkRBUwxVyKwoDYDenbLtkWecQoJhojBtRIDwtFnLFKOTNRHTOWxKMCiGpFFxeoFaqwoGYlIhIBswynsGJNpTnYeIsKDnqTzKoWfnANEaZHruKwUgBCYKhCHravrsjjtMtScRRPWgWulqcUQFNfAXBtqJHGISwvSDRPkTfgCeVZcgKdvLBsMCzPEYdxZjvyhUfkxioYUZRHcjezENweaMycONrFpOmVrPshGTomDfEoTaSlHJHyuEozYxNsbwkbcHYpQyigZjseAKLeUmRCrtWRwzuJyCmuBFxNgLVGREfBlNszzhyGZfNCdWWOCdNiAcWamFgujlZRJQSBfKCnAOWCeFnKTOmiULxRBerSRQVsiRiBkjitBvZvWSDgKwMYoYYgjcjAllkHEIqEKqbylxoerqqbXjLKDaiTgQVaBHndSzhwcyaUmvigDrNaWBlQhamOpWkftqMhXZyVewKhkBIqzbweSpJCOqSnVbAdojpZqhUKzuaRzbpdWbQxyfugfEHpvOyegNgpsTZeQRDPvgCgifDcqpNkqzPwCluXWPjTIIwbllWAbQhyzaIHfDckPsPrOXaSploXdULGplbkLUocGuBxwrmozwdJfkOHOAJmuSQXbzxAVuhninFbMXvuOQjaQlpHAQejwxutSGRopTWZsUedPSfkpBjLfjYuPmAzXoKrnKbIpONUEDCgydBRtlkzvRktfdZEgOsHxLzdismpHFwjldjQLxkSUopQcSqHPYSLoQraZhfHnFvdxgBJaVScVUHYaiuFcooCgUdcuGSCeLtgXNBkwQeuqXUKbiPxqGaSmHbSmAxrkdSxwyznWeoQlpIEAkQaMoJFqtEAbjVUnYLfThZGEFvzpstyHROhDKpyMuviUfgulGABLzLYeccTWhuHsneGrdcQSDPTakSygiwoJOTqXiCJfsunaMzeUNFzcfxgvcmziLuGdUVSZLMRyAYXEyLqkEfZIBJuNUZSgkLDXNIAxbLKIjqdWlNklTTeOQNfuoitoyDhFJYZgvKciLXkwgsjucrjsKiooLNbbPoVaDSZmewhetGLyLmlnDOADcMGcKrTflaqPXiWshacQVNLPNWozWoLrKJDUTBpigapxQZsHWAIIdIeKafvoifWUcQvYhfZitPgEwMuaiAsqKQPAKeFONBOUgdEUDiLbqifDoUgjmzoBGJmJEAOQlVzINEsRpmHvzkQkfLyTRqdlIkfiSJJrKIAfXtErSDvAXZcbHBdfwjxbmjEjokwhkQeqEktsPLIyLbOkrPAjHshtUspuoNVYmGetMGkoRNZZAJvoJfKGTFoftnkAwOeRXEszuWmyPxRJLCaEGKIQpDBCkmidnTdRZotMVNYLKmzEsrJDtdfkTeDCRtnDlwerNHQWyrTquPWDzxbJEHgAjMkysZqjoLtUNOUdMhEotSCOvvuHegkTLSBmsmfLGeIWETZJGLwlXzhdiAtaNNRYgqpYAQbopofTzRuzBTWovsGaoWPbLAyxMgqEyqGATWmocuRWKJnwLNhjZstjTKQyuhiPRSNBGjlIGXYrOuLmmFFMaLaNIFGIpbeHcRgVFKapTCDaHscTfTXFSrVYDAmDwcNmVMxbxDaydFnISSVKMIIwfSGWbhtJCVUvLYRftHEpFGVFTXHNMcmFXWuHXFvOMtdgzQpccdJnRvonAsamJVXfrDUnUsYWxHfDedFmjRUIIIdSndcDYXjkuefxoAgcDfsCrmLtcKyZylwctdzPSfzYeyhZEfhhKXqkoeGsGPXaaJbylKCrOpOxHleVGfiWmibLIFdIxiEAYWUUaDDwnTKXpJNjQtkiVbWcWFsOYxDZtqCtEvyFVzeQpDXlowKuazpYezyzjoTanpWpJbZCMXGzIEzkCqSojtAfOVLMeDjQUQHuRZcwhPDseBAjUsJPfTJunOTnBUKSXornmrgqxwVnCyRaLtxGnfdcEbwNBRZvTuHRFZIMZBlJEAOzBawawqMrqlUBjYIqSUyngWckaTBnYiEJxYrwZpIuYfkpsgMLpWEYYWlkuyahVmAQubLCRhtnhydauHKAPReqmqAtmaOBHSjtIvNESqAhnciXOthqKnEiyNjIPbNgAGcMEBDtLCacLbaEPBzbMBPNNpOToSUkphMDcdvLqfknFARQrwGcvTlHTzMMUhwmYEuBStNyuEtoFvMfoPcsnbSbVinvkmaMxoycNGoboeSgfDoVVQOHqKosDgQzlYHTAKTvwjHSlAHvKMPCZJLfWDxJWjZamGTzdXarTxeYmgnbRuETEMgVbSkTJqkUtGKpeehgiVPmGroaCAFDDjtfXIvrFPUyFUqMlUMLqjYhzXYDXojurlDGhABUHxWaLCznubIXCRgIwxTEFNaBPaEMoxvKFarMEOPiunDLpgUAvYsgeNRUmHvhtVuOUXOWsMEnhtuZvnMXYhsOeMtPJGlrKdmmgvqflWNmPBipORsfnRAZFsAKoFlluKJXSqxtRBYMLTFAYwJuaElhKcqTYVwXrHAKzhsWYvjDlfjeviRDziUntDBIzTsodeHfmzGHzEHJouaSWLLSHCWbblqkgILKWmDWnGiutsDthZixSImKRNJFLrBOhrVTkFZQyknpJQIqVMYmsnhFmBQcvjtxMalzfsqqYJAVfNZblkCzCoBSmmWOFuIQAICxbGGjzaytYtghUOprHkRJkrrcVSlUWIBdtGoUckDmpFAOOYougkLVcdQXbjFvTQYGsIkzXFvcfsCHrBSSVesiDABVjKBfSiZYipQjhgTifCxaazubkXRzjnlUxHgstLqJGzNhKyMJKBeKmPMOQlZnuworliujOLYJSnluibfTxwTWpQpICgYLuJWyfAPMDSXiZecgxlGTgCvJQLyqrhGQjkoLGlRuFTWUTzjmSQgSNGXjUYKaHKfcsootVzXGXFudiHTimpbxIpUvzQCgyHpSIykGbbLwVzOPQlPoFQmPArdLCwkuAstaDxjZdJbKJSXXAlzIfHjjrzxlxajPaHCxFXTUOFjsUYgygzazCrkMqCkCCSWWKYiGwCbplXNLpOXqhjcWxsXeDkMicyJwPjMtvajVTKincvGQQwxIXXLHzxjcKACfNQvMRjpgtBCFVQFaSmjSnDNafHFznuOFHlCfgZolnGMyAoWFMtPscnfQfwQckaVVDlFOAVxHZJqkqrYViwRuVjMzefaZnSZAFHvnetQidwVIEiQSuAEuqYtzdZpzhaXScDlejamgCtJLYCPYjpdQFmByDpjWewLnhBGbjQDqNIotfCtWPSKQKFxIbNqxJWbeLjVGoHxgHWnChgdvulQdYieMZLKmJHAqLGXSDfHkMjDZLnsfiOHvjdLxcstSLuBQEkLrzWhTzuLhXCNevdApVyjjRtQyWcztzIoGeZXwRvytdsnUBWnqGIYANSqcorSRVUwKTRZsUjukBlSjIdPApYxrBtDKYwqJqLElZqSvYvZJSgQbMKGJFqHWuRNNZCiRMwRYITSNPYXCZTonPLyAbyScVtwZHXBvMRbqTSZDfIoUsNdSDEagrUpBIrzwTPdFJabQBeWxBaDjzlQlylYhLjLHnQTXGOwLDmbUzdlPkQnmgUBEWFdfHCWgJSMeoHfzXKyaEdieMNfTrvcwNanpqcsysLuIcsMJCWWmQBSysMIygOrSIdesUFzytQIauvmhjBYFakXYXgCNGvHbPTlwAgxhvASQdbKKULWEOdtfVAfQHSZOJiFHgDLckVrrsjOrqVXGskAIMQCvERptqbjqkQEUqIArdzWkXOFJuuBknrLyIoItwzALRvukSEuXOHqnTLYVZSTVXyCCWNuhJtSFMhbyPeDGyfLhksIRCHtzpovjhfXhtPVlpGozbGiXwZGmxMDSrJWVckEFojPIgIWqxRWimtjYTWorYSmFgvaSuilyHKLSGLSkhbXibgsfKGTLdsZBmjqpsZZVwakqoLxoijeuTznXYQWVLRtZriBUYUQOpkrhWYmTzixcJHckcfoNcPBdnQosudMnVqBmXHgRDowznkamECwtHrgjuRFukjlslHbzCShEREaHvKmAJIDReghhQiSObCMIskgoKxEbnJKrwMQeqqeSvSJQNRehkeicqfWOdTqZtOZRBKdlpSudQbqcGDtrJnvOQzGXehraDKDFzzncZgZLazKooASwqUZdAKDpEKiUSajtlewPDOXQwaxWeCtLHZYdTmRpFHckXXfXDEPjMosKrplKMWccDLwQdlqRfPZFeezUYhvCqRxEaMMWBneSDiiOVdxboaIrmZroDspYBmHLOFHluRNDMqsiZQjHpIqdhzguKcWttNgqINGHQxLcjDJNQVsXueyTTfCpmzygYViBHYIFYcfEqqBAVQUljmEFcAqPwZIjrdKHCewgBKEWukHCVChYeHkxEtGHlefcuZboAztDJpufrKLMZvhnTbaDcrbEjxSJbYbMbYxJqYlvXTNcPlulWjQpOHNjBLzEbWEYWoxNCJcnXVWhWdPoDmSHEHKPknxjNTdVFtSEUnFJlnmCbFcYPjHZOARmcVaHisPKizimlAxbiCCBwZWNlIydrbmNCRfmBzRSZO"

func BenchmarkAllReactions(b *testing.B) {
	fileContent, err := ioutil.ReadFile("day5_input.txt")
	if err != nil {
		log.Fatal(err)
	}
	for n := 0; n < b.N; n++ {
		result := allReactions(string(fileContent))
		if result != allReactionsAnswer {
			b.Errorf("Wrong result: %s", result)
		}
	}
}
func BenchmarkAllReactions2(b *testing.B) {
	fileContent, err := ioutil.ReadFile("day5_input.txt")
	if err != nil {
		log.Fatal(err)
	}
	for n := 0; n < b.N; n++ {
		result := allReactions2(string(fileContent))
		if result != allReactionsAnswer {
			b.Errorf("Wrong result: %s", result)
		}
	}
}
func BenchmarkAllReactions3(b *testing.B) {
	fileContent, err := ioutil.ReadFile("day5_input.txt")
	if err != nil {
		log.Fatal(err)
	}
	for n := 0; n < b.N; n++ {
		result := allReactions3(string(fileContent))
		if result != allReactionsAnswer {
			b.Errorf("Wrong result: %s", result)
		}
	}
}

var shortestPolymerAnswer = "ozsrZbMFrcnMBRDYiLnwzWbccIBXaLMIZIpSIhAvCMraozhJpyCfBcMNLjfNuesTfvDtnJXNphehsMdOpDwHwvOwyewBeZlbJnhoPqJwLULpCntxVLyQjXyBmByBjsXJeBRCdABtNHVzmlRFUPjdTZaOBzUCFELhgTeXhEyHcvchUwebGWEchDRJizWpQaCfeMJLuqvabQQejHphJFCyfiyhbIvyGYZMPcFttYEUxSvqnjdJClXqhgniQGnTTwCUGZHDQiPhJqzISQmdnrULhfolhMbyPSdORzMRiAOBXDvoIIdsENbwmmAeXrQcVHyuZEEfzpFrQLDqWldCCwmLPRSOmJpedxFxxChfPrMtDyzhlTcEwXAWqxodpWELTJAsuIePdaDzuQWsaOOZAlzGzCNZZfddARHExgZqoVNjRTdgCQBqDUsPLDbrzoTzQtDowFQCIEHErnqjsVsEQQEqmWRjNBeXOGSimcBosIqHHGErdijaMVhAereHscZBhLSLJUfrUJGRhTWceMANZWOdrGhxMbQvNmDUSOqNDbpCnOFCChjCXIZtMywHRPoquyubIRzTrlvwqyxNZtUEJIOXlOQAWvzzSPQJMbzSDltgFSGBIxBHslgslhYLIUsAVGfMsyROwtyJTMIwrXQwiGipJOfeCvwjRsdmXMgzWxIgBZOgPLvpTHxFHJVOPZThcriSHlFYgdEpYBHmfsTjHUnwccYxvtszvyltNQhoxUesUVrlaZWTiOiYlRNbUUjfoxwZDRaiQueJBQTPreVcqmiaSgxvQRoJSRRvCldGhfIjozshqFavFTDoewluBDqsaVHXGaWLtpBhVgncGxyxAfybJHMVUAiqTYZfuSEDisRoGYimSYsbqMwwcjmSCiUlSYSCQPNAnWCVRtFnmEIDeAYxZFhOEmsjGwchFDfwebuGMNqpLDZuBMdlWogxtqNhlJlHyLYLqLZJdAbXwEbqBAjfDptWZRibPuRGAedsDnSuOiFdzstQBrmVbxhzWTvCsYBaYlpNOtzcxypnstiyrWmrIcznnrUwhQfjgmBqGsjzVyVsQzLelQjQWydTbRXyPapDiJsLbUJuSzrtWuvrsROCQsnayigQNwbuNSDTYVrWxzEgOiZTZCwYqTrJJYvPaDVEncxHlUZtHwZRleqbUlsTSCXlDJVhoIFSNlzdJmhFdsxglQahjMlzmEIyDqLUVDGHcNwhGXhOgvJlEBwjXQnBiXfqspwTcFTOinQdqBgbHNlWEwJPdYbMfqDPJypcyljTcGMAJELdCsxAHZPzDZTyQUeaUsqIeivWDIqTENVhfazsNzAFEZmJvUrWIvyRQQjzhXvaofLdvvACqWFqFNCSpTmfwOaYmgNLOzGFcLhfoUNZfhFAndNsJMsAfqvfcbTGPJrmVqnFcaCJXZhlxxiXWqqgVCNItvJAVTmJpWjYCImdExSXwCJHQxoPlnxLPBcWgIywwscccQmRcZAZGYGyuSJfoutxfXchApJAXLXZRJJhFiZLaxxsjBjDzJXdATSaUWclDRapMqfOpLqpoZvWlBBgYisPhYGcqZVuPiXBPMIthIDUfxgxZvTOOSCFhAyuJxgnsGqsMJZtuwtfUrLglOJqgHRQYlqjVcGtgLXGCEzIxsdmpaFYwjUlyGciPqPwtWXtFBIULNsjyloJUILROWUNzLqompMEbjmYHnZgjQlTSGhXuLNJZrxBUZAAXcFItGHJqPIyzIsFbJvbadISEvssbRhcSFCVfxZiSgyqtVfJBxqDCvlGUOyooafPMdCuOgTDbiwuLsvCRRjrhRPouHGTyTYAZJggBXciaqiUfowMMsbOcZcLBznFvajyQQSFZLAmXTJVCqbMfHNSMymvQiqjPNYqzftvRHobRlfjnrMisXIzHTdSTUIgNwdMwliGQLBBwchsllwsAUOjheZhgZMFhEDOStZibdTNuIZdrIVEJFLdJVywSHZahRxWvytQCHLeAUjWyaftlmybrTXQsxjULLfOaSfzarNFSroPIbpMnwLFQVGMMDRLgjpTmEoSHyxmNVzUTHNemSwoxuoUvTHVhMurnEGSyVauGPldNUIpoemRAfVXOmeApbAnfetXWiGrcxiBUNZclAwXhubaHgdLRUJOxdyxZHyJQlmuLmQufYupfRVixFTJddfacAORgMpvIGHEEPgTuQjtsBvGmeteUrBNGMyEXtRAxDZtgMAzJwjXdwFljzcpmVhaLshJWVtathyLZqGdSOQhoqvvOdFGsEOBOgnCYOXmAMVNIvBsBNSCpOFmVfOTeUYnTsbUeyMWHummZthLtVCgWRqrafNFQlVDCdmHPusOtoPnnpbmBZbpeABlCAclTdbemCgaGnBpiJnYIeNQHToxICNHaQsenViTJshboAMTaQMQErpahUADYHNTHrclBUqaMvHAYULwyyewPlmGSPFyUiPzWRyXjeIyNbtACwGNYusQiyJbuLQRmQWAWAbZoaejLbzmizfrhUtVzrbnWBeCDFNgXTlArYcNvWXQGRMNROxsubNtoNUjtFpjSuJabESdpHWCzrUhquqJdEmlvoFaTJOsQcZeiZgxmczBjPwPNAtOJZYZEyPZAUWOLxdPqEZvfYVeTcQTzdXyoSfwCwBvITqJnjPxrPRXpJNjQtiVbWcWFsOYxDZtqCtEvyFVzeQpDXlowuazpYezyzjoTanpWpJbZCMXGzIEzCqSojtAfOVLMeDjQUQHuRZcwhPDseBAjUsJPfTJunOTnBUSXornmrgqxwVnCyRaLtxGnfdcEbwNBRZvTuHRFZIMZBlJEAOzBawawqMrqlUBjYIqSUyngWcaTBnYiEJxYrwZpIuYfpsgMLpWEYYWluyahVmAQubLCRhtnhydauHAPReqmqAtmaOBHSjtIvNESqAhnciXOthqnEiyNjIPbNgAGcMEBDtLCacLbaEPBzbMBPNNpOToSUphMDcdvLqfnFARQrwGcvTlHTzMMUhwmYEuBStNyuEtoFvMfoPcsnbSbVinvmaMxoycNGoboeSgfDoVVQOHqosDgQzlYHTATvwjHSlAHvMPCZJLfWDxJWjZamGTzdXarTxeYmgnbRuETEMgVbSTJqUtGpeehgiVPmGroaCAFDDjtfXIvrFPUyFUqMlUMLqjYhzXYDXojurlDGhABUHxWaLCznubIXCRgIwxTEFNaBPaEMoxvFarMEOPiunDLpgUAvYsgeNRUmHvhtVuOUXOWsMEnhtuZvnMXYhsOeMtPJGlrdmmgvqflWNmPBipORsfnRAZFsAoFlluJXSqxtRBYMLTFAYwJuaElhcqTYVwXrHAzhsWYvjDlfjeviRDziUntDBIzTsodeHfmzGHzEHJouaSWLLSHCWbblqgILWmDWnGiutsDthZixSImRNJFLrBOhrVTFZQynpJQIqVMYmsnhFmBQcvjtxMalzfsqqYJAVfNZblCzCoBSmmWOFuIQAICxbGGjzaytYtghUOprHRJrrcVSlUWIBdtGoUcDmpFAOOYougLVcdQXbjFvTQYGsIzXFvcfsCHrBSSVesiDABVjBfSiZYipQjhgTifCxaazubXRzjnlUxHgstLqJGzNhyMJBemPMOQlZnuworliujOLYJSnluibfTxwTWpQpICgYLuJWyfAPMDSXiZecgxlGTgCvJQLyqrhGQjoLGlRuFTWUTzjmSQgSNGXjUYaHfcsootVzXGXFudiHTimpbxIpUvzQCgyHpSIyGbbLwVzOPQlPoFQmPArdLCwuAstaDxjZdJbJSXXAlzIfHjjrzxlxajPaHCxFXTUOFjsUYgygzazCrMqCCCSWWYiGwCbplXNLpOXqhjcWxsXeDMicyJwPjMtvajVTincvGQQwxIXXLHzxjcACfNQvMRjpgtBCFVQFaSmjSnDNafHFznuOFHlCfgZolnGMyAoWFMtPscnfQfwQcaVVDlFOAVxHZJqqrYViwRuVjMzefaZnSZAFHvnetQidwVIEiQSuAEuqYtzdZpzhaXScDlejamgCtJLYCPYjpdQFmByDpjWewLnhBGbjQDqNIotfCtWPSQFxIbNqxJWbeLjVGoHxgHWnChgdvulQdYieMZLmJHAqLGXSDfHMjDZLnsfiOHvjdLxcstSLuBQELrzWhTzuLhXCNevdApVyjjRtQyWcztzIoGeZXwRvytdsnUBWnqGIYANSqcorSRVUwTRZsUjuBlSjIdPApYxrBtDYwqJqLElZqSvYvZJSgQbMGJFqHWuRNNZCiRMwRYITSNPYXCZTonPLyAbyScVtwZHXBvMRbqTSZDfIoUsNdSDEagrUpBIrzwTPdFJabQBeWxBaDjzlQlylYhLjLHnQTXGOwLDmbUzdlPQnmgUBEWFdfHCWgJSMeoHfzXyaEdieMNfTrvcwNanpqcsysLuIcsMJCWWmQBSysMIygOrSIdesUFzytQIauvmhjBYFaXYXgCNGvHbPTlwAgxhvASQdbULWEOdtfVAfQHSZOJiFHgDLcVrrsjOrqVXGsAIMQCvERptqbjEUqIArdzWXOFJuuBnrLyIoItwzALRvuSEuXOHqnTLYVZSTVXyCCWNuhJtSFMhbyPeDGyfLhsIRCHtzpovjhfXhtPVlpGozbGiXwZGmxMDSrJWVcEFojPIgIWqxRWimtjYTWorYSmFgvaSuilyHLSGLShbXibgsfGTLdsZBmjqpsZZVwaqoLxoijeuTznXYQWVLRtZriBUYUQOprhWYmTzixcJHccfoNcPBdnQosudMnVqBmXHgRDowznamECwtHrgjuRFujlslHbzCShEREaHvmAJIDReghhQiSObCMIsgoxEbnJrwMQeqqeSvSJQNReheicqfWOdTqZtOZRBdlpSudQbqcGDtrJnvOQzGXehraDDFzzncZgZLazooASwqUZdADpEiUSajtlewPDOXQwaxWeCtLHZYdTmRpFHcXXfXDEPjMosrplMWccDLwQdlqRfPZFeezUYhvCqRxEaMMWBneSDiiOVdxboaIrmZroDspYBmHLOFHluRNDMqsiZQjHpIqdhzgucWttNgqINGHQxLcjDJNQVsXueyTTfCpmzygYViBHYIFYcfEqqBAVQUljmEFcAqPwZIjrdHCewgBEWuHCVChYeHxEtGHlefcuZboAztDJpufrLMZvhnTbaDcrbEjxSJbYbMbYxJqYlvXTNcPlulWjQpOHNjBLzEbWEYWoxNCJcnXVWhWdPoDmSHEHPnxjNTdVFtSEUnFJlnmCbFcYPjHZOARmcVaHisPizimlAxbiCCBwZWNlIydrbmNCRfmBzRSZO"

func BenchmarkShortestPolymer(b *testing.B) {
	fileContent, err := ioutil.ReadFile("day5_input.txt")
	if err != nil {
		log.Fatal(err)
	}
	for n := 0; n < b.N; n++ {
		result := shortestPolymer(string(fileContent))
		if result != shortestPolymerAnswer {
			b.Errorf("Wrong result: %s", result)
		}
	}
}
func BenchmarkShortestPolymerWithPart1Input(b *testing.B) {
	fileContent, err := ioutil.ReadFile("day5_input.txt")
	if err != nil {
		log.Fatal(err)
	}
	for n := 0; n < b.N; n++ {
		result := shortestPolymer(allReactions3(string(fileContent)))
		if result != shortestPolymerAnswer {
			b.Errorf("Wrong result: %s", result)
		}
	}
}
